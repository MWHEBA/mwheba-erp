# Generated by Django for CTP Plates Unification

from django.db import migrations, models


def normalize_ctp_plate_data(apps, schema_editor):
    """تطبيع بيانات الزنكات CTP لتتطابق مع المرجعية الموحدة"""
    PlateServiceDetails = apps.get_model('supplier', 'PlateServiceDetails')
    
    # خريطة تحويل مقاسات الزنكات القديمة للجديدة
    size_mapping = {
        'quarter_sheet': '35.00x50.00',
        'half_sheet': '50.00x70.00', 
        'full_sheet': '70.00x100.00',
        'custom': 'custom'
    }
    
    # تطبيع جميع السجلات الموجودة
    for plate_service in PlateServiceDetails.objects.all():
        old_size = plate_service.plate_size
        new_size = size_mapping.get(old_size, old_size)
        
        if new_size != old_size:
            plate_service.plate_size = new_size
            plate_service.save(update_fields=['plate_size'])
            print(f"تم تحديث مقاس الزنك من '{old_size}' إلى '{new_size}' للخدمة {plate_service.service.name}")


def reverse_normalize_ctp_plate_data(apps, schema_editor):
    """عكس تطبيع بيانات الزنكات CTP"""
    PlateServiceDetails = apps.get_model('supplier', 'PlateServiceDetails')
    
    # خريطة عكسية لإرجاع القيم القديمة
    reverse_mapping = {
        '35.00x50.00': 'quarter_sheet',
        '50.00x70.00': 'half_sheet',
        '70.00x100.00': 'full_sheet',
        'custom': 'custom'
    }
    
    # إرجاع جميع السجلات للقيم القديمة
    for plate_service in PlateServiceDetails.objects.all():
        old_size = plate_service.plate_size
        new_size = reverse_mapping.get(old_size, old_size)
        
        if new_size != old_size:
            plate_service.plate_size = new_size
            plate_service.save(update_fields=['plate_size'])


def ensure_plate_sizes_in_pricing_app(apps, schema_editor):
    """التأكد من وجود مقاسات الزنكات في pricing app"""
    try:
        PlateSize = apps.get_model('pricing', 'PlateSize')
        
        # المقاسات المطلوبة
        required_sizes = [
            {
                'name': 'ربع فرخ',
                'width': 35.00,
                'height': 50.00,
                'is_active': True,
                'is_default': False
            },
            {
                'name': 'نصف فرخ', 
                'width': 50.00,
                'height': 70.00,
                'is_active': True,
                'is_default': True
            },
            {
                'name': 'فرخ كامل',
                'width': 70.00,
                'height': 100.00,
                'is_active': True,
                'is_default': False
            }
        ]
        
        # إنشاء المقاسات إذا لم تكن موجودة
        for size_data in required_sizes:
            plate_size, created = PlateSize.objects.get_or_create(
                width=size_data['width'],
                height=size_data['height'],
                defaults={
                    'name': size_data['name'],
                    'is_active': size_data['is_active'],
                    'is_default': size_data['is_default']
                }
            )
            if created:
                print(f"تم إنشاء مقاس زنك جديد: {plate_size}")
                
    except Exception as e:
        print(f"تحذير: لا يمكن الوصول لنموذج PlateSize في pricing app: {e}")


class Migration(migrations.Migration):

    dependencies = [
        ('supplier', '0030_merge_20251015_1659'),
    ]

    operations = [
        # تحديث حقل plate_size لاستيعاب القيم الجديدة
        migrations.AlterField(
            model_name='plateservicedetails',
            name='plate_size',
            field=models.CharField(max_length=50, verbose_name='مقاس الزنك'),
        ),
        
        # التأكد من وجود مقاسات الزنكات في pricing app
        migrations.RunPython(
            ensure_plate_sizes_in_pricing_app,
            reverse_code=migrations.RunPython.noop,
        ),
        
        # تطبيع البيانات الموجودة
        migrations.RunPython(
            normalize_ctp_plate_data,
            reverse_code=reverse_normalize_ctp_plate_data,
        ),
    ]
