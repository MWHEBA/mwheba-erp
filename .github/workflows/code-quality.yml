name: 🎯 Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements.txt') }}

    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy pylint radon

    - name: 🎨 Code formatting check (Black)
      run: |
        echo "🎨 Checking code formatting..."
        black --check --diff --color .
      continue-on-error: true

    - name: 📦 Import sorting check (isort)
      run: |
        echo "📦 Checking import sorting..."
        isort --check-only --diff --color .
      continue-on-error: true

    - name: 🔍 Linting (flake8)
      run: |
        echo "🔍 Running flake8 linting..."
        flake8 . --statistics --tee --output-file=flake8-report.txt
      continue-on-error: true

    - name: 🔬 Type checking (mypy)
      run: |
        echo "🔬 Running type checking..."
        mypy . --ignore-missing-imports --show-error-codes || true
      continue-on-error: true

    - name: 📊 Code complexity (radon)
      run: |
        echo "📊 Analyzing code complexity..."
        radon cc . --min B --show-complexity
        radon mi . --min B
      continue-on-error: true

    - name: 🏆 Code quality score (pylint)
      run: |
        echo "🏆 Calculating code quality score..."
        find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" | head -20 | xargs pylint --output-format=text --reports=yes || true
      continue-on-error: true

    - name: 📈 Upload quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-reports
        path: |
          flake8-report.txt

  django-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 🔧 Install Django
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: ✅ Django system check
      run: |
        echo "✅ Running Django system checks..."
        python manage.py check --deploy

    - name: 🔍 Check for missing migrations
      run: |
        echo "🔍 Checking for missing migrations..."
        python manage.py makemigrations --check --dry-run

    - name: 🛡️ Security check
      run: |
        echo "🛡️ Running Django security checks..."
        python manage.py check --deploy --fail-level WARNING

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 📚 Install documentation tools
      run: |
        pip install pydocstyle interrogate

    - name: 📖 Check docstring coverage
      run: |
        echo "📖 Checking docstring coverage..."
        interrogate . --ignore-init-method --ignore-init-module --ignore-magic --ignore-nested-functions --fail-under=50 || true

    - name: 📝 Check docstring style
      run: |
        echo "📝 Checking docstring style..."
        pydocstyle . --count || true
