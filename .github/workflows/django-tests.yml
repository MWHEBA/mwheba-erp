name: 🧪 Django Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
        django-version: [4.1, 4.2]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Django==${{ matrix.django-version }}
        pip install -r requirements.txt

    - name: 🔍 Check Django version
      run: |
        python -c "import django; print(f'Django version: {django.get_version()}')"

    - name: 🗃️ Run migrations
      run: |
        python manage.py makemigrations --check --dry-run
        python manage.py migrate

    - name: 📊 Load fixtures
      run: |
        python manage.py loaddata core/fixtures/initial_data.json || true
        python manage.py loaddata client/fixtures/initial_data.json || true
        python manage.py loaddata supplier/fixtures/initial_data.json || true

    - name: 🧪 Run tests
      env:
        REDIS_URL: redis://localhost:6379/0
      run: |
        python manage.py test --verbosity=2

    - name: 📈 Generate coverage report
      run: |
        pip install coverage
        coverage run --source='.' manage.py test
        coverage xml

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 🔧 Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: 🎨 Check code formatting with Black
      run: |
        black --check --diff .

    - name: 📦 Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: 🔍 Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  security:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 🔧 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: 🔒 Run Bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true

    - name: 🛡️ Check dependencies for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true

    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
